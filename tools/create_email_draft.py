import json
from .search_contacts import run as search_contacts_run

TOOL_DEFINITION = {
    "type": "function",
    "function": {
        "name": "create_email_draft",
        "description": "Looks up a person in Google Contacts and creates a draft email for them. The AI should generate a subject and body, show the user the draft, and wait for confirmation before calling `send_email`.",
        "parameters": {
            "type": "object",
            "properties": {
                "contact_name": {
                    "type": "string",
                    "description": "The name of the contact to search for and email.",
                },
                "subject": {
                    "type": "string",
                    "description": "The subject of the email. Should be generated by the AI based on the user's request.",
                },
                "body": {
                    "type": "string",
                    "description": "The content/body of the email. Should be generated by the AI based on the user's request.",
                }
            },
            "required": ["contact_name", "subject", "body"],
        },
    },
}

def run(contact_name: str, subject: str, body: str) -> str:
    """
    Finds a contact's email using fuzzy search and prepares a draft.
    The AI should call this first, show the draft to the user for confirmation,
    and then call `send_email` upon confirmation.
    """
    print(f"Creating email draft for {contact_name}...")
    contact_json = search_contacts_run(name=contact_name)
    try:
        # The search now returns a single best match object, not a list
        contact = json.loads(contact_json)
        if not isinstance(contact, dict) or not contact.get("email"):
             return f"Could not find a contact named '{contact_name}' to draft an email to. Please check the name. The search result was: {contact_json}"
        
        recipient_email = contact.get("email")
        recipient_name = contact.get("name", contact_name)

        if not recipient_email or recipient_email == "N/A":
            return f"Found contact '{recipient_name}', but they do not have an email address."
    except (json.JSONDecodeError, IndexError):
        # This will also catch errors from a failed search, passing the message along.
        return contact_json
    except Exception as e:
        return f"An unexpected error occurred while preparing the draft: {e}"

    # Add signature to the body for the user to see in the draft
    signed_body = f"{body}\n\n--\nSheldon"

    draft = {
        "to": recipient_email,
        "subject": subject,
        "body": signed_body,
    }
    print(f"Draft created for {recipient_name} ({recipient_email}).")
    return json.dumps(draft) 